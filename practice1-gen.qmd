---
title: "practice1"
format: html
editor: visual
---

## Install & load packages

`install.packages(c("readxl", "car", "Hmisc", "party", "gmodels", "lme4", "MuMIn", "effects", "report", "parameters", "performance", "see", "patchwork", "merDeriv"))`

```{r}
library(readxl)
library(car)
library(Hmisc)
library(party)
library(gmodels)
library(lme4)
library(MuMIn)
library(effects)
library(report)
library(parameters)
library(performance)
```

## Load the dataset into R

```{r}
gen <- read.csv("genitives-finalized.csv",
                header=TRUE,
                sep=",",
                dec=".")
```

```{r}
gen <- droplevels(subset(gen, Inclusion == "y")) 
gen <- droplevels(subset(gen, Speaker.sex == "F" | Speaker.sex == "M")) 
gen <- na.omit(gen)
gen$Possessor.definiteness[gen$Possessor.definiteness=="definite"] <- "Definite"
gen <- droplevels(gen)
```

```{r}
gen$Response.variable = as.factor(gen$Response.variable)
gen$Variety = as.factor(gen$Variety)
gen$Speaker.sex = as.factor(gen$Speaker.sex)
gen$Speaker.age = as.numeric(gen$Speaker.age)
gen$Final.sibilancy = as.factor(gen$Final.sibilancy)
gen$Semantic.relation = as.factor(gen$Semantic.relation)
gen$Possessor.animacy = as.factor(gen$Possessor.animacy)
gen$Possessor.definiteness = as.factor(gen$Possessor.definiteness)
gen$Possessor.length = as.numeric(gen$Possessor.length)
gen$Possessum.length = as.numeric(gen$Possessum.length)
gen$Corpus = as.factor(gen$Corpus)
gen$Speaker = as.factor(gen$Speaker)
gen$Persistence = as.factor(gen$Persistence)
gen$Inclusion = as.factor(gen$Inclusion)
```

```{r}
gen$VarietyNew <- car::recode(gen$Variety, "
                                  'CAN'  = 'NorthernHemisphere'; 
                                  'US'   = 'NorthernHemisphere'; 
                                  'UK'   = 'NorthernHemisphere'; 
                                  'NZ'   = 'SouthernHemisphere'
                                  ")
```

```{r}
gen = subset(gen, select = c("Response.variable",
                             "Variety",
                             "VarietyNew",
                             "Speaker.sex",
                             "Speaker.age",
                             "Final.sibilancy",
                             "Semantic.relation",
                             "Possessor.animacy",
                             "Possessor.definiteness",
                             "Possessor.length",
                             "Possessum.length") )
```

```{r}
summary(gen)
dim(gen)
```

## Crosstable & boxplot & mean values
```{r}
CrossTable(
	gen$Response.variable,       # specify here what's in the rows
	gen$Speaker.sex,             # specify here what'S in the columns
	digits=1,
	expected=FALSE,
	prop.r=FALSE,
	prop.c=TRUE,                 # specfies that we want column-wise percentages
	prop.t=FALSE,
	prop.chisq = FALSE,
	chisq=FALSE,
	format="SPSS"
	)
```

```{r}
aggregate(Speaker.age ~ Response.variable, gen, mean)

### box plot -- see https://en.wikipedia.org/wiki/Box_plot
boxplot(gen$Speaker.age ~ gen$Response.variable, # specify y-axis and x-axis (categories)
        data=gen
)
```

## Conditional inference tree
```{r}
#| cache: true
#| label: fig-ctree
tree = ctree(Response.variable ~           # specificy the response variable here
               Variety +                   # specify the predictors here
               Speaker.sex +
               Speaker.age +
               Final.sibilancy +
               Semantic.relation +
               Possessor.animacy +
               Possessor.definiteness +
               Possessor.length +
               Possessum.length
             , data = gen,control=ctree_control(maxdepth=3)) # maxdepth specifies the height of the tree. Reduce to reduce complexity.
plot(tree)
#plot(tree, inner_panel = node_barplot) # with additional bars in each node

#### model C index
#### C ranges between .5 and 1; the closer to 1, the better the fit of the model
your.ctree.pred <- unlist(treeresponse(tree))[c(FALSE, TRUE)]
somers2(your.ctree.pred, as.numeric(gen$Response.variable) - 1)
```

## Random forests
```{r}
#| cache: true
#| label: fig-rforest
set.seed(123) # esnures that we can reproduce results
forest = cforest(Response.variable ~          # specificy the response variable here
                   Variety +                  # specify the predictors here
                   Speaker.sex +
                   Speaker.age +
                   Final.sibilancy +
                   Semantic.relation +
                   Possessor.animacy +
                   Possessor.definiteness +
                   Possessor.length +
                   Possessum.length
                 , data = gen)

#### calculate variable importance ranking, takes some time
forest.varimp = varimp(forest, conditional = FALSE) 

#### model C index
#### C ranges between 0.5 an 1; the closer to 1, the better the model
prob2.rf <- unlist(treeresponse(forest))[c(FALSE, TRUE)]
somerssmallcrf <- somers2(prob2.rf, as.numeric(gen$Response.variable) - 1)
somerssmallcrf["C"]

### the following code creates a dot plot visualizing the variable importance ranking
dotplot(sort(forest.varimp), xlab="Variable Importance", panel = function(x,y){
  panel.dotplot(x, y, col='darkblue', pch=16, cex=1.1)
  panel.abline(v=abs(min(forest.varimp)), col='red',
               lty='longdash', lwd=2)
}
) 
```
## Ligistic Regression
```{r}
#| cache: true
gen$Response.variable <- relevel(gen$Response.variable, ref="of-genitive") # reference level is of-genitive, thus predicted odds are for the s-genitive

glmmodel = glm(Response.variable ~             # specify response variables here
                 Final.sibilancy +             # specify oredictors in what follow
                 Semantic.relation +
                 Possessor.animacy +
                 Possessor.definiteness +
                 Possessor.length +
                 Possessum.length +
                 Speaker.sex +
                 Speaker.age
               
               , family=binomial, data=gen)

summary(glmmodel)
exp(coef(glmmodel))
```

```{r}
gen$fitted <- fitted(glmmodel)
gen$fitted 
somers2(binomial()$linkinv(fitted(glmmodel)), as.numeric(gen$Response.variable) -1)
vif(glmmodel)
```

```{r}
#| cache: true
#| label: fig-effects
fitted <- fitted(glmmodel)
predicted <- ifelse(fitted >= .5, 1,0)
a <- data.frame(gen, predicted)
CrossTable(gen$Response.variable, a$predicted)
plot(allEffects(glmmodel))
```
## Mixed-effects logistic regression
```{r}
gen$Response.variable <- relevel(gen$Response.variable, ref="of-genitive")

lme4model <- glmer(Response.variable ~ 
                     Final.sibilancy +
                     Semantic.relation +

                     #(1|Speaker)+
                     (1|Variety), # random effect (intercept adjustment)
                     
                     data = gen,
                     family=binomial
)

print(summary(lme4model), corr = F)
somers2(binomial()$linkinv(fitted(lme4model)), as.numeric(gen$Response.variable) -1)
```

```{r}
fitted <- fitted(lme4model)
predicted <- ifelse(fitted >= .5, 1,0)
a <- data.frame(gen, predicted)
CrossTable(gen$Response.variable, a$predicted)
```

```{r}
ranef(lme4model)$Variety
nms <- rownames(ranef(lme4model)$Variety)
intercepts <- ranef(lme4model)$Variety[,1]
support <- tapply(gen$Variety, gen$Variety,length)
labels <- paste(nms)
barplot(intercepts[order(intercepts)],names.arg=labels[order(intercepts)],horiz=FALSE, las=2, cex.names=0.8) 
r.squaredGLMM(lme4model)
```
```{r}
plot(allEffects(lme4model))
```
```{r}
report(glmmodel) 
```

```{r}
check_model(glmmodel) 
# Groups plots such as:
glm_collinearity <- check_collinearity(glmmodel)
glm_collinearity # prints message
plot(glm_collinearity)
```

```{r}
# plot outliers
glm_outliers <- check_outliers(glmmodel)
glm_outliers # prints message
plot(glm_outliers) 
```

## Comparison between differnt models
```{r}
model_performance(glmmodel) 
```

```{r}
model_performance(lme4model)
```

```{r}
comparison <- compare_performance(glmmodel, lme4model, metrics = "common")
comparison # note that some metrics are different because the kinds of models are different
plot(comparison)
```
